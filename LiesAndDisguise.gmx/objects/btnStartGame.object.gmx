<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprStartGame</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start the game when the host clicks this &amp; half of players are ready
//count the number of clients
var count = ds_list_size(global.ntwk.socketlist);
var noOfPlayersReady = 0;
global.playerTotal=count;
for(var i=0; i&lt; count; i++){
    if(global.ntwk.ready[i]){
        noOfPlayersReady+=1;
    }
}
if(noOfPlayersReady == count){
    //set the gamestate to game
    global.gameState = CMD_GAME;
    
    // Reset buffer to start - Networking ALWAYS reads from the START of the buffer
    buffer_seek(global.ntwk.buff, buffer_seek_start, 0);
    //set the packet to a game packet
    buffer_write(global.ntwk.buff, buffer_u8, CMD_GAME );
    
    //say what kind of game packet it is
    buffer_write(global.ntwk.buff, buffer_u8, CMD_GAME_START );
        
    // insert the total number of players
    buffer_write(global.ntwk.buff, buffer_u8, count );
        
    //select at random the player who will be the traitor
    var trait = irandom(global.playerTotal-1);
    global.traitorNum=trait;
    if(global.traitorNum==0)global.traitor=true;
   // show_message(global.traitorNum);
    //show_message(global.traitor);
   // show_message(count);
    // Now send all data... to all clients
    for(i=0;i&lt;count;i++)
    {   
        buffer_seek(global.ntwk.buff, buffer_seek_start, 3);
        // get the socket
        var sock = ds_list_find_value(global.ntwk.socketlist,i);
        var inst = ds_map_find_value( global.ntwk.clients, sock);
        //show_message(inst);
        buffer_write(global.ntwk.buff, buffer_u8, inst);
        buffer_write(global.ntwk.buff, buffer_u32, global.seed);
        
        //if they are the traitor
        if(global.traitorNum==i){
            buffer_write(global.ntwk.buff, buffer_bool,1);}
        else{
            buffer_write(global.ntwk.buff, buffer_bool,0);}
    
        var buffer_size = buffer_tell(global.ntwk.buff);
        // Send data to client
        network_send_packet(sock, global.ntwk.buff, buffer_size );
    }
        room_goto(rmGame);
}
else{
    show_message_async("Not enough players are ready...");
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draws the start game btn if you are the server host
if(global.haveServer){draw_self();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
