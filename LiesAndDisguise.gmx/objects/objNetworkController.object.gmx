<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup server depending if you are host or client

// Create a buffer for the network messages
buff = buffer_create(2048, buffer_grow, 1);

for(var i=(MAX_PLAYERS-1); i&gt;=0; i--)
{
    ready[i]=false;
    name[i]="";
}

if(global.haveServer){
    
    // create our server. Server creation may fail if there is already a server running. If it does fail, delete eveything and kill this instance
    broadcast_buffer = buffer_create(32, buffer_fixed, 1);
    //player_buffer = buffer_create(16384, buffer_fixed, 1);
    clients = ds_map_create();
    socketlist = ds_list_create();
    
    // Try and create the actual server
    server = network_create_server(global.ServerType ,PORT_PLAY, MAX_PLAYERS );
    if( server&lt;0 ){    
        // If theres already a server running, shut down and delete.
        instance_destroy();
        show_message("Server allready running......... Shutting down");
        game_restart();
        exit;
    }
    show_debug_message("now broadcasting");
    alarm[0] = room_speed;
    
    ready[0] = false;;
    name[0] = global.playerName;
    
    //now we create our client regardless of being host or not
    client = network_create_socket(global.ServerType);
    // remember this socket ID so the server can ignore it (if we have a local server)
    global.client = client;

    // Connect to our server
    var err = network_connect(client, global.connectip, PORT_PLAY);
    if( err!=0 ){
        // if we can't connect, show and error and restart... could be more graceful :)
        show_message("Error - can not connect to server!!");
        game_restart();
    }
    global.playerTotal=1;
    global.MyNumber=0;
}
else//client
{
// Create a TCP/IP socket
client = network_create_socket(global.ServerType);

global.client = client;

// Connect to our server
var err = network_connect(client, global.connectip, PORT_PLAY);
if( err!=0 ){
    // if we can't connect, show and error and restart... could be more graceful :)
    show_message("Error - can not connect to server!!");
    instance_destroy();
    game_restart();
    exit;
}else{
}

//now that our client has connected we can send the clients name
sendLobbyPacket();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.haveServer)
{
    ds_map_destroy(clients);
    ds_list_destroy(socketlist);
    buffer_delete(broadcast_buffer);
}
buffer_delete(buff);
global.haveServer = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Broadcast our location occasionally. Clients pick this up and can then display servers to the user. 
//show_debug_message("broadcasting");

if(global.gameState == CMD_LOBBY &amp;&amp; global.playerTotal &lt; MAX_PLAYERS)
//this is a really bad way of doing this, but a quick hack. if we are full, dont broadcast anymore. 
//note, wont actually stop players connecting, I should refuse the connection.
{
    buffer_seek( broadcast_buffer, buffer_seek_start, 0 );
    buffer_write( broadcast_buffer, buffer_string, global.serverName );
    network_send_broadcast( server, PORT_BROADCAST, broadcast_buffer, buffer_tell(broadcast_buffer) );
}
    
// Broadcast once a second...
alarm[0]=room_speed;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send Data to clients (lobby and game)

if(global.haveServer &amp;&amp; global.gameState==CMD_LOBBY)
{
    count = ds_list_size(socketlist);
    global.playerTotal=count;

    if( count&gt;0 )
    {
        // Reset buffer to start - Networking ALWAYS reads from the START of the buffer
        buffer_seek(buff, buffer_seek_start, 0);
        
        //set the packe tto a lobby packet
        buffer_write(buff, buffer_u8, CMD_LOBBY );
        
        // insert the total number of players
        buffer_write(buff, buffer_u8, count );
    
        // Dummy instance number 
        buffer_write(buff, buffer_u8, 0 );
        
        // All players send ready and name (insert into packet)
        for (var i=0; i&lt;count; i++)
        {
            buffer_write(buff, buffer_bool, ready[i]);
            buffer_write(buff, buffer_string, name[i]);
        }
        
        //get size
        var buffer_size = buffer_tell(buff);
            
        // Now send all data... to all clients
        for(i=0;i&lt;count;i++)
        {   
            // get the socket
            var sock = ds_list_find_value(socketlist,i);
            
            buffer_seek(buff, buffer_seek_start, 2);
            var inst = ds_map_find_value( clients, sock);
            buffer_write(buff, buffer_u8, inst);
    
            // Send data to client
            network_send_packet(sock, buff, buffer_size );
        }
    }
}

if(global.haveServer &amp;&amp; global.gameState==CMD_GAME){
    count = ds_list_size(socketlist);
    global.playerTotal=count;
    if(count&gt;0){
        var numDead=0;
        //figure out what the state of the game is
        for(var i=0;i&lt;count;i++)
        {
            var tId=instance_find(objPlayer,i);
            //Order MATTERS!
            if(global.Keys[i,KEY_W])with(tId)event_user(KEY_W);  //jump
            if(global.Keys[i,KEY_S]){
            with(tId){  //crouch
            if(sprite_index != mWeaponSprite &amp;&amp; sprite_index!=sprPlayerJump){
                sprite_index = sprPlayerCrouch;}}}else{
                with(tId){
                if(sprite_index==sprPlayerCrouch)sprite_index=sprPlayerIdle}}
            if(global.Keys[i,KEY_A])with(tId)event_user(KEY_A);  //left
            if(global.Keys[i,KEY_D])with(tId)event_user(KEY_D);  //right
            
            if((!(global.Keys[i,KEY_A]||global.Keys[i,KEY_D])) &amp;&amp; tId.sprite_index==sprPlayerRunning)
                with(tId)sprite_index=sprPlayerIdle;
        
            //set if the client is running
            with(tId)mPlayerRunning=global.Keys[i,KEY_SHIFT];
            
            //Check for end of game
            if(tId.mAmITheTraitor &amp;&amp; tId.mHealth&lt;=0)//tator lost.
            {
                SendGameOver(0);
                with(objBlood)instance_destroy();
                global.gameState=CMD_LOBBY;
                room_goto(TraitorLose);
                exit;
            }
            else if(tId.mHealth&lt;=0)//this guy is dead.
            {
                numDead++;
            }
        }
        if(numDead==global.playerTotal-1 &amp;&amp; numDead!=0)//tator won
        {
            SendGameOver(1);
            with(objBlood)instance_destroy();
            global.gameState=CMD_LOBBY;
            room_goto(TraitorWin);
            exit;
        }
        
        //send out what ther server knowes each step!
        
        //go to the start of the buffer
        buffer_seek(buff, buffer_seek_start,0);
        
        //set the packe to a game packet
        buffer_write(buff, buffer_u8, CMD_GAME );
        
        // insert the second CMD
        buffer_write(buff, buffer_u8, CMD_GAME_DATA);
    
        // insert the count of players
        buffer_write(buff, buffer_u8, count );
        
        //dummy their instance number (it gets filled in later - giggidy)
        buffer_write(buff, buffer_u8, 0);
        
        //fill in the data for each player
        for(var i=0;i&lt;count;i++){
            var tempID = instance_find(objPlayer,i);
            buffer_write(buff,buffer_u16,tempID.x);
            buffer_write(buff,buffer_u16,tempID.y);
            buffer_write(buff,buffer_u8,tempID.sprite_index);
            buffer_write(buff,buffer_f32,tempID.image_xscale);
            buffer_write(buff,buffer_u32,tempID.image_blend);
            buffer_write(buff,buffer_u8,tempID.mHealth);
            buffer_write(buff,buffer_u8,tempID.mCurrentWeapon);
        }
        
        //get size
        var buffer_size = buffer_tell(buff);
            
        //send to each player
        for(var i=0;i&lt;count;i++){
            // get the socket
                var sock = ds_list_find_value(socketlist,i);
                
                buffer_seek(buff, buffer_seek_start, 3);
                var inst = ds_map_find_value( clients, sock);
                buffer_write(buff, buffer_u8, inst);
        
                // Send data to client
                network_send_packet(sock, buff, buffer_size );
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Server network control
var eventid = ds_map_find_value(async_load, "id");
if(global.haveServer){
    if( server == eventid ){
        // If the socket ID is the server one, then we have a new 
        /// client connecting, OR an old client disconnecting
       connectDisconnectClient();
       }else if( eventid==global.client){
        
        }else{
        // All other sockets are connected client sockets, and we have recieved commands from them.
        ServerRecievedData();
    }
}else{
    clientRecievedData();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
